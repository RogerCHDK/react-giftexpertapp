{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGirdItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","categories","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGirdItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","ReactDOM","render","document","getElementById"],"mappings":"2MAIaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAE1B,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAeA,OACI,sBAAMC,SATW,SAACC,GAClBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAe,SAAAS,GAAU,OAAMP,GAAN,mBAAqBO,OAC9CN,EAAc,MAKlB,SACI,uBACIO,KAAM,OACNC,MAAQT,EACRU,SAlBc,SAACP,GAEvBF,EAAcE,EAAEQ,OAAOF,a,+BCRlBG,EAAO,uCAAG,WAAQC,GAAR,uBAAAC,EAAA,6DACbC,EADa,iDACoCC,UAAUH,GAD9C,+DAEAI,MAAOF,GAFP,cAEbG,EAFa,gBAGIA,EAAKC,OAHT,uBAGXC,EAHW,EAGXA,KAEFC,EAAOD,EAAKE,KAAK,SAAAC,GACnB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAKQ,EAAIG,OAAOC,iBAAiBZ,QATtB,kBAaZM,GAbY,4CAAH,sDCAPO,EAAc,SAAC,GAAoB,IAAlBH,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IACjC,OACI,sBAAKc,UAAU,yCAAf,UACI,qBAAKC,IAAMf,EAAMgB,IAAMN,IACvB,4BAAKA,QCAJO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAEtB,ECLwB,SAAEA,GAE1B,MAA0Bd,mBAAS,CAC/BqB,KAAM,GACNa,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAkBA,OAbAC,qBAAW,WACPxB,EAASC,GAAWwB,MAChB,SAACC,GAEOH,EAAS,CACLf,KAAMkB,EACNL,SAAS,SAK1B,CAAEpB,IAEEqB,EDf0BK,CAAa1B,GAAtCoB,EAAR,EAAQA,QAAcP,EAAtB,EAAiBN,KACjB,OACI,qCACC,qBAAIS,UAAU,oCAAd,cAAqDhB,EAArD,OACEoB,GAAW,mBAAGJ,UAAU,mCAAb,qBACb,qBAAKA,UAAU,YAAf,SACSH,EAAOJ,KAAK,SAAAC,GAAG,OACjB,cAAC,EAAD,eAEKA,GADCA,EAAIC,aEZbgB,EAAe,WAExB,MAAoCzC,mBAAS,CAAC,WAA9C,mBAAOQ,EAAP,KAAmBT,EAAnB,KAWA,OACI,qCACI,8CACA,cAAC,EAAD,CAAaA,cAAgBA,IAC7B,uBAEA,6BAEQS,EAAWe,KAAK,SAAAT,GACZ,OAAO,cAAC,EAAD,CACPA,SAAYA,GACLA,YCvB/B4B,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.0a646790.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\nexport const AddCategory = ({ setCategories }) => {\r\n\r\n    const [inputValue, setInputValue] = useState('');\r\n\r\n    const handleInputChange = (e) => {\r\n        // console.log(e.target.value); //asi obtenemos el valor del input en cuanto cambia\r\n        setInputValue(e.target.value); //despues le asignamos ese valor para que lo renderize\r\n    };\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault(); //evito que se refresque la pagina\r\n        if (inputValue.trim().length > 2) { //valido que no este vacio el input\r\n            setCategories( categories => [ inputValue, ...categories]); //obtengo el valor de estado actual, y despues agrego lo que esta en el iput\r\n            setInputValue(''); //Limpio el input\r\n        }\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <input \r\n                type= \"text\"\r\n                value= {inputValue}\r\n                onChange={ handleInputChange }/>\r\n        </form>\r\n    );\r\n}\r\n\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}","\r\n\r\nexport const getGifs = async ( category ) => {\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category) }&limit=10&api_key=rFJBsjNSFROaXWbpH1DErdD4vDjOKNcc`;\r\n    const resp = await fetch( url );\r\n    const { data } = await resp.json();\r\n\r\n    const gifs = data.map( img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images.downsized_medium.url\r\n        };\r\n    });\r\n\r\n    return gifs;\r\n};","import React from 'react'\r\n\r\nexport const GifGirdItem = ( {title, url} ) => {\r\n    return (\r\n        <div className=\"card animate__animated animate__bounce\">\r\n            <img src={ url } alt= {title} />\r\n            <p>{ title }</p>\r\n        </div>\r\n    )\r\n}\r\n","// Version usando custom hooks\r\nimport React from 'react';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport { GifGirdItem } from './GifGirdItem';\r\n\r\n\r\nexport const GifGrid = ({ category }) => {\r\n\r\n    const { loading, data:images } = useFetchGifs(category);\r\n    return (\r\n        <> \r\n         <h3 className=\"animate__animated animate__bounce\"> { category } </h3>\r\n         { loading && <p className=\"animate__animated animate__flash\">Loading</p>}\r\n         <div className=\"card-grid\">\r\n                { images.map( img => \r\n                <GifGirdItem \r\n                key={ img.id }\r\n                { ...img }/> //hack, puedo mandar las propiedades individuales usando el operador spread, sino tendria que hacer: props.img.id\r\n                ) }\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/*\r\nPrimera version funcionanado, usando useEffect\r\nimport React, { useEffect, useState } from 'react'\r\nimport { getGifs } from '../helpers/getGifs';\r\nimport { GifGirdItem } from './GifGirdItem';\r\n\r\nexport const GifGrid = ({ category }) => {\r\n\r\n    useEffect( () => {\r\n        getGifs( category ).then(\r\n            setImages\r\n        )\r\n    }, [ category ]); //esto hace que solo se ejecute una sola vez, aunque se vuelva a renderizar el hook, solo cambia en caso de que la categpria llegue a cambiar\r\n\r\n    const [images, setImages] = useState([]);\r\n    \r\n    return (\r\n        <> \r\n         <h3> { category } </h3>\r\n        <div className=\"card-grid\">\r\n                { images.map( img => \r\n                <GifGirdItem \r\n                key={ img.id }\r\n                { ...img }/> //hack, puedo mandar las propiedades individuales usando el operador spread, sino tendria que hacer: props.img.id\r\n                ) }\r\n        </div>\r\n        </>\r\n    )\r\n}*/\r\n","import { useEffect, useState } from \"react\"\r\nimport { getGifs } from \"../helpers/getGifs\";\r\n\r\nexport const useFetchGifs = ( category ) => {\r\n\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    useEffect( () => {\r\n        getGifs( category ).then(\r\n            (imgs)  => {\r\n                // setTimeout(()=>{\r\n                    setState({\r\n                        data: imgs,\r\n                        loading: false\r\n                    });\r\n                // },3000)\r\n            }\r\n        )\r\n    }, [ category ]);\r\n\r\n    return state;\r\n}","import React, { useState } from 'react'\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nexport const GifExpertApp = () => {\r\n    // const categories = ['One Punch', 'Samurai X', 'Dragon Ball'];\r\n    const [categories, setCategories] = useState(['Naruto']);\r\n\r\n    /*\r\n    const handleAdd = () => {\r\n        // setCategories([...categories, 'Naruto']);\r\n        //el set tiene una funcion de callbak en el cual es primer argumento es el estado anterior, \r\n        // y debe regresar el nuevo estado\r\n        setCategories( cats => [...cats, 'Naruto']); \r\n    };*/\r\n\r\n\r\n    return (\r\n        <>\r\n            <h2>GifExpertApp</h2>\r\n            <AddCategory setCategories={ setCategories }/>\r\n            <hr/>\r\n            {/* <button onClick = {handleAdd}>Agregar</button> */}\r\n            <ol>\r\n                {\r\n                    categories.map( category => {\r\n                        return <GifGrid \r\n                        category ={ category }\r\n                        key= { category }/>\r\n                    })\r\n                }\r\n            </ol>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { GifExpertApp } from \"./GifExpertApp\";\n\nReactDOM.render(\n  <GifExpertApp/>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}